#!/usr/bin/env bash

set -eux

TMP_DIR="$(mktemp -d)"

function get_targets {
  find . -maxdepth 3 -name kustomization.yaml -exec dirname {} \;
  find . -mindepth 4 -maxdepth 4 -name kustomization.yaml -exec dirname {} \; | sort | uniq | grep variant
}

function patched_kustomization {
  local env_path flux_patch
  env_path=$1
  flux_patch="$env_path/flux-patch.yaml"
  kustomize create
  kustomize edit add resource "$env_path"
  if [ -s "$flux_patch" ]; then
    kustomize edit add patch "$flux_patch"
  fi
}

function build {
  local ref="$1"
  printf "\n\nChecking out ref: %s\n" "$ref"
  git checkout "$ref" --quiet
  for env_path in $(get_targets); do
    local build_dir
    if ! [ -d "$env_path" ]; then continue; fi
    build_dir="$TMP_DIR/$ref/${env_path#*kustomize/}"
    printf "\n\nCreating build directory: %s\n" "$build_dir"
    mkdir -p "$build_dir"
    patched_kustomization "$env_path"
    echo "Running kustomize"
    kustomize build . -o "$build_dir"
    rm kustomization.yaml
  done
}

function changed_yamls {
  git diff \
    --no-index \
    --diff-filter AM \
    --name-only \
    "$TMP_DIR/$INPUT_BASE_REF" "$TMP_DIR/$INPUT_HEAD_REF" \
  | grep -E '\.(yaml|yml)$'
}

function is_helm_release {
  local kind yaml
  yaml=$1
  kind=$(yq r "$yaml" kind)
  if [[ $kind == "HelmRelease" ]]; then
      echo true
  else
    echo false
  fi
}

function main {
  local exit_code escaped_output formatted_output hrval_output output returned
  exit_code=0

  build "$INPUT_HEAD_REF"
  build "$INPUT_BASE_REF"

  set +e
  for yaml in $(changed_yamls); do
    if [[ $(is_helm_release "$yaml") == "true" ]]; then
      hrval_output=$(/usr/local/bin/hrval.sh "$yaml" "$INPUT_IGNORE_VALUES" "$INPUT_KUBERNETES_VERSION" "$INPUT_HELM_VERSION")
      returned=$?
      if [[ $returned -ne 0 ]]; then
        exit_code=$returned
      fi
      output+=$(sed -E "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" <<< "${hrval_output}%0A%0A")
    fi
  done
  set -e

  formatted_output=$(printf "\`\`\` console\n%s\n\`\`\`\n" "$output")
  escaped_output=${formatted_output//$'\n'/'%0A'}
  echo "::set-output name=output::$escaped_output"
  printf "\n\nOutput: %s\n" "$escaped_output"
  exit $exit_code
}

main
